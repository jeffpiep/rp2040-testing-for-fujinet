;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program mux
.side_set 3 optional
start:
    mov osr, pins               ; get the input phases
    out x, 4                    ; copy to X
    set y, 0b0100               ; RDDATA (head 0) 
    jmp x!=y next1
    jmp start       side 0b001
next1:
    set y, 0b1100               ; RDDATA (head 1) 
    jmp x!=y next2
    jmp start       side 0b001
next2:
    set y, 0b1011               ; TACH 
    jmp x!=y next3
    jmp start       side 0b010
next3:
    jmp start       side 0b100


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO input and output, and configures the SM to output on a particular pin

void mux_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // configure a SM
   pio_sm_config c = mux_program_get_default_config(offset);
   // config side set
   sm_config_set_sideset_pins(&c, pin);
   // set the out pin to pin
   //sm_config_set_out_pins(&c, pin, 3);
   // start at GPIO2 to read in the mux
   sm_config_set_in_pins(&c, 2); // start at GPIO 2 for the mux
   // there are 4 wires to read for latch mux, shift to the right, no autopull
   // sm_config_set_in_shift(&c, true, false, 4);
   sm_config_set_out_shift(&c, true, false, 4);
   // set pin as a GPIO output connected to this SM
   pio_gpio_init(pio, pin+0);
   pio_gpio_init(pio, pin+1);
   pio_gpio_init(pio, pin+2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);
   //sm_config_set_set_pins(&c, pin, 1);
   // initialize
   pio_sm_init(pio, sm, offset, &c);
}
%}

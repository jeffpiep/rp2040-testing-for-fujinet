;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program phases
start:
    mov osr, pins   ; read the GPIO's into the output shift register
    out y, 4        ; shift the 4 LSBs into Y
    pull noblock    ; get the latch word into OSR, if no new word in FIFO, get it from X
    mov x, osr      ; put the osr back into X in case it's new
.wrap_target
    jmp y-- loop    ; if y>0 goto to loop and decrement y
    out pins, 1     ; output the desired bit
    jmp start       ; do it again
loop:
    out null, 1     ; get rid of a bit
.wrap               


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO input and output, and configures the SM to output on a particular pin

void phases_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // configure a SM
   pio_sm_config c = phases_program_get_default_config(offset);
   // set the out pin to pin
   sm_config_set_out_pins(&c, pin, 1);
   // start at GPIO2 to read in the phases
   sm_config_set_in_pins(&c, 2); // start at GPIO 2 for the phases
   // there are 4 wires to read for latch mux, shift to the right, no autopull
   // sm_config_set_in_shift(&c, true, false, 4);
   sm_config_set_out_shift(&c, true, false, 16);
   // set pin as a GPIO output connected to this SM
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   sm_config_set_set_pins(&c, pin, 1);
   // initialize
   pio_sm_init(pio, sm, offset, &c);
}
%}
